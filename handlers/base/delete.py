import logging
import re
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from sqlalchemy.orm import sessionmaker
from apscheduler.jobstores.base import JobLookupError
from scheduler.apscheduler import scheduler


from const.callback.delete import DeleteEvent
from db import Event, engine
from handlers.filter.filter import IsPrivate
from keyboards.keyboards import get_delete_type_keyboard
from aiogram import F
from config import BotConfig

config = BotConfig()
router = Router()
Session = sessionmaker(bind=engine)

"""
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete
"""
@router.message(Command("delete"), IsPrivate())
async def delete_command(message: Message):
    await message.answer(text="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∏–≤–µ–Ω—Ç—ã. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /list -> '–í—Å–µ'", reply_markup=get_delete_type_keyboard())


"""
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–∏—Ç—å '–í—Å–µ' –∏–≤–µ–Ω—Ç—ã
"""
@router.callback_query(F.data == DeleteEvent.DELETE_ALL.value)
async def delete_all_events(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    try:
        with Session() as session:
            events = session.query(Event).filter_by(telegram_chat_id=chat_id).all()
            if not events:
                await callback.message.answer(text=config.delete_list_empty)
                return
            for event in events:
                remove_scheduler_jobs(event.id)
                session.delete(event)
            session.commit()

        await callback.message.answer(text=config.delete_all_text)

    except Exception as error:
        logging.error(error)


"""
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–∫–∏ 'delete' —É –∫–∞–∂–¥–æ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∏–≤–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
"""
@router.callback_query(F.data.startswith("delete_event:"))
async def delete_event_by_id(callback: CallbackQuery):
    try:
        match = re.match(r"delete_event:(\d+)", callback.data)
        if not match:
            await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        event_id = int(match.group(1))

        with Session() as session:
            event = session.query(Event).filter_by(id=event_id).first()
            if not event:
                await callback.message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.")
                return

            session.delete(event)
            session.commit()

        remove_scheduler_jobs(event_id)

        await callback.message.edit_text("üóëÔ∏è –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=None)

    except Exception as e:
        logging.error(e)
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")


def remove_scheduler_jobs(event_id: int):
    try:
        scheduler.remove_job(f"event_{event_id}")
    except JobLookupError:
        pass

    for suffix in ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun', '*']:
        try:
            scheduler.remove_job(f"event_{event_id}_{suffix}")
        except JobLookupError:
            continue

