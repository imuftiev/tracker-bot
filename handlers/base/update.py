import logging
import re

from aiogram import F
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from sqlalchemy.orm import sessionmaker

from db import engine, Event

router = Router()
Session = sessionmaker(bind=engine)


@router.callback_query(F.data.startswith("update_event:"))
async def update_event_handler(callback: CallbackQuery, state : FSMContext):
    try:
        match = re.match(r"update_event:(\d+)", callback.data)
        if not match:
            await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        event_id = int(match.group(1))

        with Session() as session:
            event = session.query(Event).filter_by(id=event_id).first()
            if not event:
                await callback.message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            session.commit()

        await callback.message.edit_text("üîÑÔ∏è –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.", reply_markup=None)

    except Exception as e:
        logging.error(e)
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")