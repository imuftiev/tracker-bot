import logging
from datetime import datetime, timedelta
from aiogram import types
from aiogram import Router
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery
from sqlalchemy.orm import sessionmaker
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from bot_state.state_stack import push_state
from const.callback.callback_types import InlineButtonType, RepeatTypeInlineButton
from handlers.keyboard.inline import back, cancel_button
from handlers.time.time import set_time_remind, set_date_remind
from const.event.priority import Priority
from const.event.repeatable import RepeatType, RepeatDays, OnlyDay
from keyboards import keyboards
from aiogram import F
from handlers.filter.filter import IsPrivate
from bot_state.states import AddEventState, RepeatableEventState
from config import BotConfig
from db import engine, User
from keyboards.keyboards import get_cancel_return_keyboard

config = BotConfig()
router = Router()
Session = sessionmaker(bind=engine)

"""
    –î–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω 
    –ø—Ä–∏–Ω—Ü–∏–ø –ö–æ–Ω–µ—á–Ω–æ–≥–æ –ê–≤—Ç–æ–º–∞—Ç–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º FSMContext
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—É—Ç–µ–º –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã ‚Äì /add
    –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ ‚Äì /cancel
"""

""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add """


@router.message(Command("add"), IsPrivate())
async def add_command(message: Message, state: FSMContext):
    try:
        await state.clear()
        await push_state(state, AddEventState.adding_title)
        await message.answer(
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è", parse_mode=ParseMode.HTML, reply_markup=keyboards.get_cancel_keyboard()
        )
    except Exception as e:
        logging.error(e)
        await state.clear()


""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äì –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞"""


@router.message(AddEventState.adding_title, F.text)
async def set_new_event_title(message: Message, state: FSMContext):
    try:
        await push_state(state, AddEventState.adding_description)
        await state.update_data(title=message.text)
        await message.answer(
            text="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è", reply_markup=get_cancel_return_keyboard()
        )
    except Exception as e:
        logging.error(e)
        await state.clear()


""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äì –û–ø–∏—Å–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞"""


@router.message(F.text, AddEventState.adding_description)
async def set_new_event_description(message: Message, state: FSMContext):
    try:
        await push_state(state, AddEventState.adding_status)
        await state.update_data(description=message.text)
        await message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è", reply_markup=keyboards.get_status_keyboard()
        )
    except Exception as e:
        logging.error(e)
        await state.clear()


""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Callback –≤—ã–∑–æ–≤–∞ ‚Äì –°—Ç–∞—Ç—É—Å –∏–≤–µ–Ω—Ç–∞"""


@router.callback_query(F.data, AddEventState.adding_status)
async def set_new_event_status(callback: types.CallbackQuery, state: FSMContext):
    try:
        if callback.data == InlineButtonType.CANCEL.value:
            await cancel_button(callback, state)
            return
        if callback.data == InlineButtonType.RETURN.value:
            await back(callback, state)
            return

        await push_state(state, AddEventState.adding_repeatable)
        await state.update_data(status=callback.data)
        await callback.message.edit_text(
            text="–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –ø—Ä–æ —Å–æ–±—ã—Ç–∏–µ",
            reply_markup=keyboards.get_repeatable_type_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ event_status: {e}")
        await state.clear()


""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Callback –≤—ã–∑–æ–≤–∞ ‚Äì –ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø—Ä–æ —Å–æ–±—ã—Ç–∏–µ"""


@router.callback_query(
    F.data.in_([r.value for r in RepeatType] + [InlineButtonType.CANCEL.value, InlineButtonType.RETURN.value]),
    AddEventState.adding_repeatable
)
async def set_new_event_repeatable(callback: types.CallbackQuery, state: FSMContext):
    try:
        match callback.data:
            case InlineButtonType.CANCEL.value:
                await cancel_button(callback, state)
                return
            case InlineButtonType.RETURN.value:
                await back(callback, state)
                return

        match callback.data:
            case RepeatType.ONLY_DAY.value:
                await state.update_data(repeatable=False)
                await state.update_data(repeat_type=RepeatType(callback.data))
                await push_state(state, AddEventState.adding_remind_date)
                await callback.message.edit_reply_markup(reply_markup=None)
                await callback.message.edit_text("üïì <b>–ó–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å</b>\n\n"
                                                 "üìÖ <i>–§–æ—Ä–º–∞—Ç:</i>\n<code>–î–µ–Ω—å.–ú–µ—Å—è—Ü.–ì–æ–¥ –ß–∞—Å—ã:–ú–∏–Ω—É—Ç—ã</code>\n"
                                                 "üîπ <b>–ü—Ä–∏–º–µ—Ä:</b> <code>14.08.2025 09:00</code>",
                                                 reply_markup=keyboards.get_day_options_keyboard())
                return
            case RepeatType.EVERY_DAY.value:
                await state.update_data(repeatable=True)
                await state.update_data(repeat_type=RepeatType(callback.data))
                await push_state(state, RepeatableEventState.adding_every_day)

                await callback.message.edit_reply_markup(reply_markup=None)
                await callback.message.edit_text(
                    text="<b>üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:</b>",
                    reply_markup=keyboards.get_days_of_week_keyboard(selected_days=[])
                )
                return
            case RepeatType.EVERY_MONTH.value:
                await state.update_data(repeatable=True)
                await state.update_data(repeat_type=RepeatType(callback.data))
                await push_state(state, RepeatableEventState.adding_every_month)

                await callback.message.edit_reply_markup(reply_markup=None)
                await callback.message.edit_text(
                    text="<b>üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>",
                    reply_markup=keyboards.get_days_of_month_keyboard(selected_month_days=[])
                )
                return
            case RepeatType.EVERY_YEAR.value:
                await state.update_data(repeatable=True)
                await state.update_data(repeat_type=RepeatType(callback.data))
                await push_state(state, RepeatableEventState.adding_every_year)

                await callback.message.edit_reply_markup(reply_markup=None)
                await callback.message.edit_text(
                    text="<b>üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>",
                    reply_markup=keyboards.get_months_keyboard(selected_months=[])
                )
                return
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ event_repeatable: {e}")
        await state.clear()


""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Callback –≤—ã–∑–æ–≤–∞ ‚Äì –í—ã–±–æ—Ä –¥–Ω–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""


@router.callback_query(
    F.data.in_([d.value for d in RepeatDays] + [InlineButtonType.RETURN.value]),
    RepeatableEventState.adding_every_day
)
async def set_new_event_days_of_week(callback: CallbackQuery, state: FSMContext):
    try:
        if callback.data == InlineButtonType.RETURN.value:
            await back(callback, state)
            return
        day = callback.data
        data = await state.get_data()
        selected_days = data.get("selected_days", [])

        if day in selected_days:
            selected_days.remove(day)
        else:
            selected_days.append(day)

        await state.update_data(selected_days=selected_days)

        new_markup = keyboards.get_days_of_week_keyboard(selected_days=selected_days)

        await callback.message.edit_text(text="<b>üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:</b>", reply_markup=new_markup)
    except Exception as e:
        logging.error(e)
        await state.clear()


""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Callback –≤—ã–∑–æ–≤–∞ ‚Äì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π"""


@router.callback_query(F.data == InlineButtonType.CONFIRM.value)
async def confirm_days(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        repeat_type = data.get("repeat_type")

        if repeat_type == RepeatType.EVERY_MONTH.value:
            selected_days = data.get("selected_month_days", [])
            await state.update_data(days_of_month=selected_days)
        elif repeat_type == RepeatType.EVERY_DAY.value:
            selected_days = data.get("selected_days", [])
            await state.update_data(days_of_week=selected_days)

        await push_state(state, AddEventState.adding_remind_at)
        await callback.message.edit_text(
            "‚è∞ <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n"
            "<code>12:30, 09:00</code> –∏–ª–∏ <code>1230, 0900</code>",
            reply_markup=keyboards.get_cancel_return_keyboard()
        )
    except Exception as e:
        logging.error(e)
        await state.clear()


""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Callback –≤—ã–∑–æ–≤–∞ ‚Äì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–µ–≤"""


@router.callback_query(
    F.data == RepeatTypeInlineButton.CONFIRM_MONTH.value,
    RepeatableEventState.adding_every_year
)
async def confirm_months(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        selected_months = data.get("selected_months", [])

        if not selected_months:
            await callback.answer("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–µ—Å—è—Ü", show_alert=True)
            return

        await state.update_data(selected_months=selected_months)
        await push_state(state, RepeatableEventState.adding_every_month)

        await callback.message.edit_text(
            text="<b>üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>",
            reply_markup=keyboards.get_days_of_month_keyboard([])
        )
    except Exception as e:
        await state.clear()
        logging.error(e)


@router.callback_query(
    F.data.startswith("day_") | (F.data == InlineButtonType.RETURN.value),
    RepeatableEventState.adding_every_month
)
async def set_new_event_days_of_month(callback: CallbackQuery, state: FSMContext):
    try:
        if callback.data == InlineButtonType.RETURN.value:
            await back(callback, state)
            return

        day = callback.data.replace("day_", "")
        data = await state.get_data()
        selected_month_days = data.get("selected_month_days", [])

        if day in selected_month_days:
            selected_month_days.remove(day)
        else:
            selected_month_days.append(day)

        await state.update_data(selected_month_days=selected_month_days)

        new_markup = keyboards.get_days_of_month_keyboard(selected_month_days=selected_month_days)
        await callback.message.edit_text(
            text="<b>üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:</b>",
            reply_markup=new_markup
        )
    except Exception as e:
        logging.error(e)
        await state.clear()


@router.callback_query(
    F.data.startswith("month_") | (F.data == InlineButtonType.RETURN.value),
    RepeatableEventState.adding_every_year
)
async def set_new_event_months(callback: CallbackQuery, state: FSMContext):
    try:
        if callback.data == InlineButtonType.RETURN.value:
            await back(callback, state)
            return

        month = callback.data.replace("month_", "")
        data = await state.get_data()
        selected_months = data.get("selected_months", [])

        if month in selected_months:
            selected_months.remove(month)
        else:
            selected_months.append(month)

        await state.update_data(selected_months=selected_months)

        new_markup = keyboards.get_months_keyboard(selected_months=selected_months)
        await callback.message.edit_text(
            text="<b>üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>",
            reply_markup=new_markup
        )
    except Exception as e:
        logging.error(e)
        await state.clear()


""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äì –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 'HH:MM' """


@router.message(F.text, AddEventState.adding_remind_at)
async def set_new_event_remind_at(message: Message, state: FSMContext):
    try:

        now = datetime.now()
        remind_time = await set_time_remind(message)
        if remind_time is None:
            return
        if remind_time < now:
            remind_time += timedelta(days=1)

        await state.update_data(remind_at=remind_time)
        await message.answer(text="üéØ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–æ–±—ã—Ç–∏—è</b>",
                             reply_markup=keyboards.get_priority_keyboard())
        await push_state(state, AddEventState.adding_priority)
    except Exception as e:
        logging.error(e)
        await state.clear()


""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Callback –≤—ã–∑–æ–≤–∞ ‚Äì –í—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""


@router.callback_query(
    F.data.in_([p.value for p in Priority]),
    AddEventState.adding_priority
)
async def set_new_event_priority(callback: types.CallbackQuery, state: FSMContext):
    with Session() as session:
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
            await state.update_data(priority=Priority(callback.data))
            await state.update_data(
                user_id=session.query(User).filter_by(telegram_user_id=callback.from_user.id).first().id)

            await callback.message.edit_text(text="üìç <b>–ö—É–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Å–æ–±—ã—Ç–∏–∏?</b>",
                                             reply_markup=keyboards.get_chat_type_keyboard())
            await push_state(state, AddEventState.adding_privacy)
        except Exception as e:
            logging.error(e)
            await state.clear()


""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äì –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è  """


@router.callback_query(F.data == OnlyDay.TODAY.value)
async def set_event_day_today(callback: CallbackQuery, state: FSMContext):
    await push_state(state, AddEventState.adding_remind_at)
    await callback.message.edit_text("‚è∞ <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n"
                                     "<code>12:30,09:00</code> –∏–ª–∏ <code>1230,0900</code>",
                                     reply_markup=keyboards.get_cancel_return_keyboard())


""" –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äì –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 'mm.dd.year HH:MM' """


@router.message(F.text, AddEventState.adding_remind_date)
async def set_new_event_remind_date(message: Message, state: FSMContext):
    try:
        remind_time = await set_date_remind(message)
        if remind_time is None:
            return
        await state.update_data(remind_at=remind_time)
        await message.answer(text="üéØ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–æ–±—ã—Ç–∏—è</b>",
                             reply_markup=keyboards.get_priority_keyboard())
        await push_state(state, AddEventState.adding_priority)
    except Exception as e:
        logging.error(e)
        await state.clear()
        await message.answer("–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
